/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "sigs.k8s.io/gcp-filestore-csi-driver/pkg/apis/multishare/v1"
)

// InstanceInfoLister helps list InstanceInfos.
// All objects returned here must be treated as read-only.
type InstanceInfoLister interface {
	// List lists all InstanceInfos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.InstanceInfo, err error)
	// InstanceInfos returns an object that can list and get InstanceInfos.
	InstanceInfos(namespace string) InstanceInfoNamespaceLister
	InstanceInfoListerExpansion
}

// instanceInfoLister implements the InstanceInfoLister interface.
type instanceInfoLister struct {
	indexer cache.Indexer
}

// NewInstanceInfoLister returns a new InstanceInfoLister.
func NewInstanceInfoLister(indexer cache.Indexer) InstanceInfoLister {
	return &instanceInfoLister{indexer: indexer}
}

// List lists all InstanceInfos in the indexer.
func (s *instanceInfoLister) List(selector labels.Selector) (ret []*v1.InstanceInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.InstanceInfo))
	})
	return ret, err
}

// InstanceInfos returns an object that can list and get InstanceInfos.
func (s *instanceInfoLister) InstanceInfos(namespace string) InstanceInfoNamespaceLister {
	return instanceInfoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstanceInfoNamespaceLister helps list and get InstanceInfos.
// All objects returned here must be treated as read-only.
type InstanceInfoNamespaceLister interface {
	// List lists all InstanceInfos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.InstanceInfo, err error)
	// Get retrieves the InstanceInfo from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.InstanceInfo, error)
	InstanceInfoNamespaceListerExpansion
}

// instanceInfoNamespaceLister implements the InstanceInfoNamespaceLister
// interface.
type instanceInfoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstanceInfos in the indexer for a given namespace.
func (s instanceInfoNamespaceLister) List(selector labels.Selector) (ret []*v1.InstanceInfo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.InstanceInfo))
	})
	return ret, err
}

// Get retrieves the InstanceInfo from the indexer for a given namespace and name.
func (s instanceInfoNamespaceLister) Get(name string) (*v1.InstanceInfo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("instanceinfo"), name)
	}
	return obj.(*v1.InstanceInfo), nil
}
